#cloud-config

apt:
  preserve_sources_list: true
  sources:
    msft.list:
      source: "deb https://packages.microsoft.com/ubuntu/18.04/multiarch/prod bionic main"
      key: |
        -----BEGIN PGP PUBLIC KEY BLOCK-----
        Version: GnuPG v1.4.7 (GNU/Linux)

        mQENBFYxWIwBCADAKoZhZlJxGNGWzqV+1OG1xiQeoowKhssGAKvd+buXCGISZJwT
        LXZqIcIiLP7pqdcZWtE9bSc7yBY2MalDp9Liu0KekywQ6VVX1T72NPf5Ev6x6DLV
        7aVWsCzUAF+eb7DC9fPuFLEdxmOEYoPjzrQ7cCnSV4JQxAqhU4T6OjbvRazGl3ag
        OeizPXmRljMtUUttHQZnRhtlzkmwIrUivbfFPD+fEoHJ1+uIdfOzZX8/oKHKLe2j
        H632kvsNzJFlROVvGLYAk2WRcLu+RjjggixhwiB+Mu/A8Tf4V6b+YppS44q8EvVr
        M+QvY7LNSOffSO6Slsy9oisGTdfE39nC7pVRABEBAAG0N01pY3Jvc29mdCAoUmVs
        ZWFzZSBzaWduaW5nKSA8Z3Bnc2VjdXJpdHlAbWljcm9zb2Z0LmNvbT6JATUEEwEC
        AB8FAlYxWIwCGwMGCwkIBwMCBBUCCAMDFgIBAh4BAheAAAoJEOs+lK2+EinPGpsH
        /32vKy29Hg51H9dfFJMx0/a/F+5vKeCeVqimvyTM04C+XENNuSbYZ3eRPHGHFLqe
        MNGxsfb7C7ZxEeW7J/vSzRgHxm7ZvESisUYRFq2sgkJ+HFERNrqfci45bdhmrUsy
        7SWw9ybxdFOkuQoyKD3tBmiGfONQMlBaOMWdAsic965rvJsd5zYaZZFI1UwTkFXV
        KJt3bp3Ngn1vEYXwijGTa+FXz6GLHueJwF0I7ug34DgUkAFvAs8Hacr2DRYxL5RJ
        XdNgj4Jd2/g6T9InmWT0hASljur+dJnzNiNCkbn9KbX7J/qK1IbR8y560yRmFsU+
        NdCFTW7wY0Fb1fWJ+/KTsC4=
        =J6gs
        -----END PGP PUBLIC KEY BLOCK----- 
packages:
  - moby-cli
  - libiothsm-std
  - moby-engine
write_files:
  - path: /tmp/docker-daemon.json
    permissions: 0644
    owner: root
    content: |
      {
              "dns": ["1.1.1.1"],
              "log-driver": "json-file",
              "log-opts": { "max-size": "50m", "max-file": "5" }
      }
  - path: /tmp/iotedge-config.yaml
    permissions: 0600
    owner: root
    content: |
      ###############################################################################
      #                      IoT Edge Daemon configuration
      ###############################################################################
      #
      # This file configures the IoT Edge daemon. The daemon must be restarted to
      # pick up any configuration changes.
      #
      # Note - this is a simplified config file used for automation. For details on 
      # other config options, check /etc/iotedge/config.yaml.bak
      #
      ###############################################################################      
      
      # DPS X.509 provisioning configuration
      provisioning:
        source: "dps"
        global_endpoint: "https://global.azure-devices-provisioning.net"
        scope_id: "', variables('dpsScopeId'), '"
        attestation:
          method: "x509"
          identity_cert: "file:///home/', variables('adminUserName') ,'/edgeCerts/iot-edge-device-identity-', variables('edgeDeviceName') , '-full-chain.cert.pem"
          identity_pk: "file:///home/', variables('adminUserName') ,'/edgeCerts/iot-edge-device-identity-', variables('edgeDeviceName'), '.key.pem"
        dynamic_reprovisioning: true
      
      ###############################################################################
      # Certificate settings
      ###############################################################################
      certificates:
        device_ca_cert: "file:///home/', variables('adminUserName') ,'/edgeCerts/iot-edge-device-', variables('edgeDeviceName'), '-CA-full-chain.cert.pem"
        device_ca_pk: "file:///home/', variables('adminUserName') ,'/edgeCerts/iot-edge-device-', variables('edgeDeviceName'), '-CA.key.pem"
        trusted_ca_certs: "file:///home/', variables('adminUserName') ,'/edgeCerts/azure-iot-test-only.root.ca.cert.pem"     

      ###############################################################################
      # Edge Agent module spec
      ############################################################################### 
      agent:
        name: "edgeAgent"
        type: "docker"
        env: {}
        config:
          image: "mcr.microsoft.com/azureiotedge-agent:1.0"
          auth: {}
                
      ###############################################################################
      # Edge device hostname
      ###############################################################################            
      hostname: "iot-playground-', variables('edgeDeviceName'), '-vm"

      ###############################################################################
      # Connect settings
      ###############################################################################
      connect:
        management_uri: "unix:///var/run/iotedge/mgmt.sock"
        workload_uri: "unix:///var/run/iotedge/workload.sock"      

      ###############################################################################
      # Listen settings
      ###############################################################################      
      listen:
        management_uri: "fd://iotedge.mgmt.socket"
        workload_uri: "fd://iotedge.socket"

      ###############################################################################
      # Home Directory
      ###############################################################################
      homedir: "/var/lib/iotedge"            

      ###############################################################################
      # Moby Container Runtime settings
      ###############################################################################
      moby_runtime:
        uri: "unix:///var/run/docker.sock"
runcmd:
  - |
      set -x
      (
        sudo apt-get update -y
        sudo apt-get upgrade -y

        # Install Az cli
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        
        # Install Az Copy
        wget https://aka.ms/downloadazcopy-v10-linux
        tar -xvf downloadazcopy-v10-linux
        sudo rm /usr/bin/azcopy
        sudo cp ./azcopy_linux_amd64_*/azcopy /usr/bin/
        sudo chmod +x /usr/bin/azcopy
        
        # Download Certificates from Storage Account
        azcopy copy "', variables('certsStorageSasUrl'), '" "/home/', variables('adminUserName') ,'/edgeCerts"

        chown -R ', variables('adminUserName') ,':', variables('adminUserName') ,' /home/', variables('adminUserName') ,'/edgeCerts

        # Wait for docker daemon to start
        while [ $(ps -ef | grep -v grep | grep docker | wc -l) -le 0 ]; do 
          sleep 3
        done

        #TODO: Replace with a template file and one replacement

        # Prevent iotedge from starting before the device connection string is set in config.yaml
        sudo ln -s /dev/null /etc/systemd/system/iotedge.service
        sudo apt-get update
        sudo apt-get install iotedge

        # Prepare local storage for edge device
        sudo mkdir /etc/iotedge/storage
        sudo chown 1000 /etc/iotedge/storage
        sudo chmod 700 /etc/iotedge/storage

        #Docker daemon config
        sudo cp /tmp/docker-daemon.json /etc/docker/daemon.json

        #Move config.yaml
        sudo chown iotedge:iotedge /tmp/iotedge-config.yaml
        sudo mv /etc/iotedge/config.yaml /etc/iotedge/config.yaml.bak
        sudo mv /tmp/iotedge-config.yaml /etc/iotedge/config.yaml -f 

        sudo systemctl daemon-reload
        sudo systemctl restart docker

        sudo systemctl unmask iotedge
        sudo systemctl start iotedge
      ) &
