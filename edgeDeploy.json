{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "edgeDeviceName": {
      "type": "string",
      "metadata": {
        "description": "Seed name for the Edge Device (accordingly to certificate generation)."
      }
    },
    "dpsScopeId": {
      "type": "string",
      "metadata": {
        "description": "IoT DPS ScopeId"
      }
    },
    "certsStorageSasUrl": {
      "type": "string",
      "metadata": {
        "description": "SAS URL to the storage account folder containing the certificates to be downloaded. Sample: https://<storage-account-name>.file.core.windows.net/<file-share-name>/<directory-path><SAS-token>"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_DS1_v2",
      "metadata": {
        "description": "VM size"
      }
    },
    "ubuntuOSVersion": {
      "type": "string",
      "defaultValue": "18.04-LTS",
      "metadata": {
        "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "sshPublicKey",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
      }
    }
  },
  "variables": {
    "imagePublisher": "Canonical",
    "imageOffer": "UbuntuServer",
    "dpsScopeId": "[parameters('dpsScopeId')]",
    "certsStorageSasUrl": "[parameters('certsStorageSasUrl')]",
    "networkSecurityGroupName": "[concat('iot-playground-vms', '-nsg')]",
    "adminUserName":"[parameters('adminUserName')]",
    "edgeDeviceName": "[parameters('edgeDeviceName')]", 
    "dnsLabelPrefix":"[concat('iot-playground-', variables('edgeDeviceName'))]",
    "nicName": "[concat(variables('dnsLabelPrefix'), '-nic')]",
    "vmName": "[concat(variables('dnsLabelPrefix'),'-vm')]",
    "virtualNetworkName": "[concat('iot-playground', '-vnet')]", // TODO: PARAMETRIZE
    "publicIPAddressName": "[concat(variables('dnsLabelPrefix'),'-ip')]",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "[concat('iot-playground-vms', '-subnet')]",
    "subnetPrefix": "10.0.1.0/24",
    "publicIPAddressType": "Dynamic",
    "storageAccountType": "Standard_LRS",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "apiVersion": "2015-06-15",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [{
          "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
          "keyData": "[parameters('adminPasswordOrKey')]"
        }]
      }
    }
  },
  "resources": [{
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsLabelPrefix')]"
        }
      }
    },
    {
      "comments": "Default Network Security Group for template",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-08-01",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [{
          "name": "default-allow-22",
          "properties": {
            "priority": 1000,
            "access": "Allow",
            "direction": "Inbound",
            "destinationPortRange": "22",
            "protocol": "Tcp",
            "sourceAddressPrefix": "*",
            "sourcePortRange": "*",
            "destinationAddressPrefix": "*"
          }
        }]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [{
          "name": "[concat(variables('dnsLabelPrefix'), '-ip')]",
          "properties": {
            "privateIPAllocationMethod": "Dynamic",
            "publicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
            },
            "subnet": {
              "id": "[variables('subnetRef')]"
            }
          }
        }]
      }
    },
    {
      "apiVersion": "2016-04-30-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "customData": "[base64(concat('#cloud-config\n\napt:\n  preserve_sources_list: true\n  sources:\n    msft.list:\n      source: \"deb https://packages.microsoft.com/ubuntu/18.04/multiarch/prod bionic main\"\n      key: |\n        -----BEGIN PGP PUBLIC KEY BLOCK-----\n        Version: GnuPG v1.4.7 (GNU/Linux)\n\n        mQENBFYxWIwBCADAKoZhZlJxGNGWzqV+1OG1xiQeoowKhssGAKvd+buXCGISZJwT\n        LXZqIcIiLP7pqdcZWtE9bSc7yBY2MalDp9Liu0KekywQ6VVX1T72NPf5Ev6x6DLV\n        7aVWsCzUAF+eb7DC9fPuFLEdxmOEYoPjzrQ7cCnSV4JQxAqhU4T6OjbvRazGl3ag\n        OeizPXmRljMtUUttHQZnRhtlzkmwIrUivbfFPD+fEoHJ1+uIdfOzZX8/oKHKLe2j\n        H632kvsNzJFlROVvGLYAk2WRcLu+RjjggixhwiB+Mu/A8Tf4V6b+YppS44q8EvVr\n        M+QvY7LNSOffSO6Slsy9oisGTdfE39nC7pVRABEBAAG0N01pY3Jvc29mdCAoUmVs\n        ZWFzZSBzaWduaW5nKSA8Z3Bnc2VjdXJpdHlAbWljcm9zb2Z0LmNvbT6JATUEEwEC\n        AB8FAlYxWIwCGwMGCwkIBwMCBBUCCAMDFgIBAh4BAheAAAoJEOs+lK2+EinPGpsH\n        /32vKy29Hg51H9dfFJMx0/a/F+5vKeCeVqimvyTM04C+XENNuSbYZ3eRPHGHFLqe\n        MNGxsfb7C7ZxEeW7J/vSzRgHxm7ZvESisUYRFq2sgkJ+HFERNrqfci45bdhmrUsy\n        7SWw9ybxdFOkuQoyKD3tBmiGfONQMlBaOMWdAsic965rvJsd5zYaZZFI1UwTkFXV\n        KJt3bp3Ngn1vEYXwijGTa+FXz6GLHueJwF0I7ug34DgUkAFvAs8Hacr2DRYxL5RJ\n        XdNgj4Jd2/g6T9InmWT0hASljur+dJnzNiNCkbn9KbX7J/qK1IbR8y560yRmFsU+\n        NdCFTW7wY0Fb1fWJ+/KTsC4=\n        =J6gs\n        -----END PGP PUBLIC KEY BLOCK----- \npackages:\n  - moby-cli\n  - libiothsm-std\n  - moby-engine\nwrite_files:\n  - path: /tmp/docker-daemon.json\n    permissions: 0644\n    owner: root\n    content: |\n      {\n              \"dns\": [\"1.1.1.1\"],\n              \"log-driver\": \"json-file\",\n              \"log-opts\": { \"max-size\": \"50m\", \"max-file\": \"5\" }\n      }\n  - path: /tmp/iotedge-config.yaml\n    permissions: 0600\n    owner: root\n    content: |\n      ###############################################################################\n      #                      IoT Edge Daemon configuration\n      ###############################################################################\n      #\n      # This file configures the IoT Edge daemon. The daemon must be restarted to\n      # pick up any configuration changes.\n      #\n      # Note - this is a simplified config file used for automation. For details on \n      # other config options, check /etc/iotedge/config.yaml.bak\n      #\n      ###############################################################################      \n      \n      # DPS X.509 provisioning configuration\n      provisioning:\n        source: \"dps\"\n        global_endpoint: \"https://global.azure-devices-provisioning.net\"\n        scope_id: \"', variables('dpsScopeId'), '\"\n        attestation:\n          method: \"x509\"\n          identity_cert: \"file:///home/', variables('adminUserName') ,'/edgeCerts/iot-edge-device-identity-', variables('edgeDeviceName') , '-full-chain.cert.pem\"\n          identity_pk: \"file:///home/', variables('adminUserName') ,'/edgeCerts/iot-edge-device-identity-', variables('edgeDeviceName'), '.key.pem\"\n        dynamic_reprovisioning: true\n      \n      ###############################################################################\n      # Certificate settings\n      ###############################################################################\n      certificates:\n        device_ca_cert: \"file:///home/', variables('adminUserName') ,'/edgeCerts/iot-edge-device-', variables('edgeDeviceName'), '-CA-full-chain.cert.pem\"\n        device_ca_pk: \"file:///home/', variables('adminUserName') ,'/edgeCerts/iot-edge-device-', variables('edgeDeviceName'), '-CA.key.pem\"\n        trusted_ca_certs: \"file:///home/', variables('adminUserName') ,'/edgeCerts/azure-iot-test-only.root.ca.cert.pem\"     \n\n      ###############################################################################\n      # Edge Agent module spec\n      ############################################################################### \n      agent:\n        name: \"edgeAgent\"\n        type: \"docker\"\n        env: {}\n        config:\n          image: \"mcr.microsoft.com/azureiotedge-agent:1.0\"\n          auth: {}\n                \n      ###############################################################################\n      # Edge device hostname\n      ###############################################################################            \n      hostname: \"iot-pg-', variables('edgeDeviceName'), '-vm\"\n\n      ###############################################################################\n      # Connect settings\n      ###############################################################################\n      connect:\n        management_uri: \"unix:///var/run/iotedge/mgmt.sock\"\n        workload_uri: \"unix:///var/run/iotedge/workload.sock\"      \n\n      ###############################################################################\n      # Listen settings\n      ###############################################################################      \n      listen:\n        management_uri: \"fd://iotedge.mgmt.socket\"\n        workload_uri: \"fd://iotedge.socket\"\n\n      ###############################################################################\n      # Home Directory\n      ###############################################################################\n      homedir: \"/var/lib/iotedge\"            \n\n      ###############################################################################\n      # Moby Container Runtime settings\n      ###############################################################################\n      moby_runtime:\n        uri: \"unix:///var/run/docker.sock\"\nruncmd:\n  - |\n      set -x\n      (\n        sudo apt-get update -y\n        sudo apt-get upgrade -y\n\n        # Install Az cli\n        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n        \n        # Install Az Copy\n        wget https://aka.ms/downloadazcopy-v10-linux\n        tar -xvf downloadazcopy-v10-linux\n        sudo rm /usr/bin/azcopy\n        sudo cp ./azcopy_linux_amd64_*/azcopy /usr/bin/\n        sudo chmod +x /usr/bin/azcopy\n        \n        # Download Certificates from Storage Account\n        azcopy copy \"', variables('certsStorageSasUrl'), '\" \"/home/', variables('adminUserName') ,'/edgeCerts\"\n\n        chown -R ', variables('adminUserName') ,':', variables('adminUserName') ,' /home/', variables('adminUserName') ,'/edgeCerts\n\n        # Wait for docker daemon to start\n        while [ $(ps -ef | grep -v grep | grep docker | wc -l) -le 0 ]; do \n          sleep 3\n        done\n\n        #TODO: Replace with a template file and one replacement\n\n        # Prevent iotedge from starting before the device connection string is set in config.yaml\n        sudo ln -s /dev/null /etc/systemd/system/iotedge.service\n        sudo apt-get update\n        sudo apt-get install iotedge\n\n        # Prepare local storage for edge device\n        sudo mkdir /etc/iotedge/storage\n        sudo chown 1000 /etc/iotedge/storage\n        sudo chmod 700 /etc/iotedge/storage\n\n        #Docker daemon config\n        sudo cp /tmp/docker-daemon.json /etc/docker/daemon.json\n\n        #Move config.yaml\n        sudo chown iotedge:iotedge /tmp/iotedge-config.yaml\n        sudo mv /etc/iotedge/config.yaml /etc/iotedge/config.yaml.bak\n        sudo mv /tmp/iotedge-config.yaml /etc/iotedge/config.yaml -f \n\n        sudo systemctl daemon-reload\n        sudo systemctl restart docker\n\n        sudo systemctl unmask iotedge\n        sudo systemctl start iotedge\n      ) &\n'))]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('ubuntuOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [{
            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
          }]
        }
      }
    }
  ],
  "outputs": {
    "Public SSH": {
      "type": "string",
      "value": "[concat('ssh -i .ssh/iotedge-vm-iot-playground ', reference(resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))).osProfile.adminUsername, '@', reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))).dnsSettings.fqdn)]"
    },
    "VM Name": {
      "type": "string",
      "value": "[variables('vmName')]"
    }
  }
}